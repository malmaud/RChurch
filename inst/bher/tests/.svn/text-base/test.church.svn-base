

(define (check-test info expectation-fn true-expectation tolerance name)
  (begin
    (display "inference test: ")(display name)
    (let* ((estimates (map (lambda (run) (mean (map expectation-fn run))) info))
           (errors (map (lambda (estimate) (abs (- estimate true-expectation))) estimates))
           (mean-abs-error (mean errors))          
           (std-error (sqrt (/ (mean (map (lambda (x) (* x x)) errors))
                               (length errors)) ) )
           )
      (if (> mean-abs-error tolerance)
          (for-each display (list ".. failed! true expectation: "  true-expectation ", test mean: " (mean estimates) "\n"))
          (display ".. passed.\n")))))

(define (equal?-test name test-val true-val)
  (begin
    (display "deterministic test: ")(display name)
    (if (not (equal? test-val true-val))
        (for-each display (list ".. failed! true value: "  true-val ", test value: " test-val "\n"))
        (display ".. passed.\n"))))

(define samples 150)
(define lag 20)
(define runs 5)
(define error-tolerance 0.07)



(equal?-test "deterministic test: begin-define"
            (begin (define a 10)
                   a)
            10)

(equal?-test "deterministic test: begin-define 2"
           (begin (define (foo x . y) y)
                  (foo 1 2 3 4) )
            '(2 3 4))

(equal?-test "deterministic test: begin-define 3"
            (begin (define a 10)
                   (define b 12)
                   a
                   (+ a b))
            22)

(equal?-test "deterministic test: let-desugar" 
            (let ((a 1)
                  (b 2))
              'x
              (let ((b a)
                    (a b))
                'y
                (list a b)))
            '(2 1) )

(equal?-test "deterministic test: named-let-desugar" 
            (let loop ((n 4))  ;; computes n'th fibonacci number
              (if (<= n 1) 
                  1
                  (+ (loop (- n 2))
                     (loop (- n 1)) )))
            5 )

(equal?-test "deterministic test: let*-desugar"
            (let ((a 1)
                  (b 2))
              'x
              (let* ((b a)
                     (a b))
                'y
                (list a b)))
            '(1 1) )

(equal?-test "deterministic test: case-desugar"
             (case (+ 7 1)
               ((7 9 11) 'x 'odd)
               ((6 8) 'y 'even)
               (else 'z 'nothing) )
             'even )

(equal?-test "deterministic test: cond-desugar"
             (cond ((< 2 1) 'x 'a)
                   ((< 1 1) 'y 'b)
                   (else 'z 'c))
             'c )

(equal?-test "deterministic test: cond-desugar"
            (cond ((< 2 1) 'x 'a)
                  ((<= 1 1) 'y 'b)
                  (else 'z 'c))
            'b )

(equal?-test "deterministic test: map"
            (map (lambda (x) (list x x)) (list 1 2 3))
            '((1 1) (2 2) (3 3)) )

(check-test (repeat runs
                    (lambda ()
                      (repeat samples (lambda () (flip 0.7)))))
            (lambda (x) (if x 1 0))
            0.7
            error-tolerance
            "random, no query" )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define a (/ 1 1000))
                                a
                                (flip a) )))
            (lambda (b) b)
            (/ 1 1000)
            0.0 ;;error-tolerance
            "setting a flip" )

;; (test-mh samples lag runs
;;         '( (define a (if (flip) 0 0.5))
;;            (define b (sample-discrete (list a (- 1 a))))
;;            (define c (if (and (= a 0)
;;                               (= b 0))
;;                          error ;; probability zero event
;;                          1))
;;            (+ b c)
;;            true )
;;         (lambda (b) b)
;;         1.75
;;         error-tolerance
;;         "measure zero erp situation." )

;; (test-mh samples lag runs
;;         '( (define dist (if (flip) (list 1) (list 0.5 0.5))) 
;;            (define b (sample-discrete dist))
;;            (list-ref dist b)  ;; there is a measure zero overflow here 
;;            true )
;;         (lambda (b) b)
;;         0.75
;;         error-tolerance
;;         "more insidious measure zero erp situation.")

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (flip 0.7)
                                true )))
            (lambda (x) (if x 1 0))
            0.7
            error-tolerance
            "unconditioned flip.")

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define a (flip))
                                (define b (flip))
                                (and a b)
                                (or a b) )))
            (lambda (x) (if x 1 0))
            (/ 1 3)
            error-tolerance
            "and conditioned on or." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define a (flip 0.3))
                                (define b (flip 0.3))
                                (and a b)
                                (or a b) )))
            (lambda (x) (if x 1 0))
            (/ (* 0.3 0.3) (+ (* 0.3 0.3) (* 0.7 0.3) (* 0.3 0.7)))
            error-tolerance
            "and conditioned on or, biased flip." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define bit-flip (lambda (fidelity x) 
                                                   (flip (if x fidelity (- 1 fidelity)))))
                                (define hyp (flip 0.7))
                                hyp
                                (bit-flip 0.8 hyp) )))
            (lambda (x) (if x 1 0)) 
            (/ (* 0.7 0.8) (+ (* 0.7 0.8) (* 0.3 0.2)))
            error-tolerance
            "conditioned flip." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (if (flip 0.7) (flip 0.2) (flip 0.8))
                                true )))
            (lambda (x) (if x 1 0)) 
            (+ (* 0.7 0.2) (* 0.3 0.8))
            error-tolerance
            "random 'if' with random branches, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (flip (if (flip 0.7) 0.2 0.8))
                                true )))
            (lambda (x) (if x 1 0))
            (+ (* 0.7 0.2) (* 0.3 0.8))
            error-tolerance
            "flip with random weight, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define proc (if (flip 0.7) (lambda (x) (flip 0.2)) (lambda (x) (flip 0.8))))
                                (proc 1)
                                true )))
            (lambda (x) (if x 1 0)) 
            (+ (* 0.7 0.2) (* 0.3 0.8))
            error-tolerance
            "random procedure application, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define hyp (multinomial (list 'b 'c 'd) (list 0.1 0.6 0.3)))
                                (define observe (lambda (x) (if (flip 0.8) x 'b))) ;;this will be high variance since likelihood is not marginalized.
                                (eq? hyp 'b)
                                (eq? (observe hyp) 'b) )))
            (lambda (x) (if x 1 0)) 
            0.357
            error-tolerance
            "conditioned multinomial.")


(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define (power-law prob x) (if (flip prob) x (power-law prob (+ x 1))))
                                (define a (power-law 0.3 1))
                                (< a 5)
                                true )))
            (lambda (x) (if x 1 0)) 
            (apply + ((lambda (prob) (map (lambda (x) (* (expt (- 1 prob) (- x 1)) prob)) (list 1 2 3 4))) 0.3))
            error-tolerance
            "recursive stochastic fn using define, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define proc (mem (lambda (x) (flip 0.8))))
                                (and (proc 1) (proc 2) (proc 1) (proc 2))
                                true )))
            (lambda (x) (if x 1 0)) 
            0.64
            error-tolerance
            "memoized flip, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define proc (mem (lambda (x) (flip 0.2))))
                                (proc 1)
                                (or (proc 1) (proc 2) (proc 2) (proc 2)) )))
            (lambda (x) (if x 1 0)) 
            (/ (+ (* 0.2 0.2) (* 0.2 0.8)) (+ (* 0.2 0.2) (* 0.2 0.8) (* 0.8 0.2)))
            ;;(/ (+ (* 0.2 0.2  0.2 0.2 0.2) (* 0.2 0.2  0.8 0.8 0.8)) (+ (* 0.2 0.2  0.2 0.2 0.2) (* 0.2 0.2  0.8 0.8 0.8) (* 0.8 0.8 0.2 0.2 0.2)))
            error-tolerance
            "memoized flip, conditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define a (flip 0.8))
                                (define proc (mem (lambda (x) a)))
                                (and (proc 1) (proc 1))
                                true )))
            (lambda (x) (if x 1 0)) 
            0.8
            error-tolerance
            "bound symbol used inside memoizer, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define proc (mem (lambda (x) (flip 0.8))))
                                (and (proc (uniform-draw (list 1 2 3))) (proc (uniform-draw (list 1 2 3))))
                                true )))
            (lambda (x) (if x 1 0)) 
            (+ (* (/ 1 3) 0.8) (* (/ 2 3) (* 0.8 0.8)))
            error-tolerance
            "memoized flip with random argument, unconditioned." )


(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define proc (if (flip 0.7) (lambda (x) (flip 0.2)) (lambda (x) (flip 0.8))))
                                (define memproc (mem proc))
                                (and (memproc 1) (memproc 2))
                                true )))
            (lambda (x) (if x 1 0)) 
            (+ (* 0.7 0.2 0.2) (* 0.3 0.8 0.8))
            error-tolerance
            "memoized random procedure, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define bit-flip (lambda (fidelity x) (flip (if x fidelity (- 1 fidelity)))))
                                (rejection-query (define a (flip 0.7)) a (bit-flip 0.8 a))
                                true )))
            (lambda (x) (if x 1 0)) 
            (/ (* 0.7 0.8) (+ (* 0.7 0.8) (* 0.3 0.2)))
            error-tolerance
            "mh-query over rejection query for conditioned flip." )

;; (define noise 0.0)
;; (check-test (repeat runs
;;                     (lambda ()
;;                       (mh-query samples lag
;;                                 (define noisy-xor (lambda (a b n) (flip (if (not (eq? a b)) 1 n))) ) 
;;                                 (define a (flip))
;;                                 (define b (flip))
;;                                 a
;;                                 (noisy-xor a b noise) )))
;;             (lambda (x) (if x 1 0))
;;             0.5
;;             error-tolerance
;;             "two flips correlated by conditioner (expect failure -- won't mix without tempering)." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define a (if (flip 0.9) (first (beta 1 5)) 0.7))
                                (define b (flip a))
                                a
                                b )))
            (lambda (x) x)
            0.417 ;approximated by 10000 rejection samples (in church, but not with mh...).
            error-tolerance
            "trans-dimensional." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define a (if (flip) (mem flip) (mem flip)))
                                (define b (a))
                                b
                                true )))
            (lambda (x) (if x 1 0)) 
            0.5
            error-tolerance
            "memoized flip in if branch (create/destroy memprocs), unconditioned." )


(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define bb (make-dirichlet-discrete (list 0.5 0.5 0.5)))
                                (= (bb) (bb))
                                true )))
            (lambda (b) (if b 1 0))
            (/ (+ 1 0.5) (+ 1 (* 3 0.5)))
            error-tolerance
            "symmetric dirichlet-discrete, unconditioned." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define bb (make-dirichlet-discrete (list 0.5 0.5)))
                                (= 0 (bb))
                                (= 0 (bb)) )))
            (lambda (b) (if b 1 0))
            (/ (+ 1 0.5) (+ 1 (* 2 0.5)))
            error-tolerance
            "symmetric dirichlet-discrete, conditioned." )

(define crp-param 0.5)
(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define draw-type (make-CRP crp-param));(CRPmem 1.0 gensym))
                                (define class (mem (lambda (x) (draw-type))))
                                (eq? (class 'bob) (class 'mary))
                                (eq? (class 'bob) (class 'jim)))))
            (lambda (x) (if x 1 0))
            (/ 2.0 (+ 2.0 crp-param))
            error-tolerance
            "CRP third customer at first table, conditioned on second customer at first table." )

(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define draw-type (DPmem 1.0 gensym))
                                (define class (mem (lambda (x) (draw-type))))
                                (eq? (class 'bob) (class 'mary))
                                true)))
            (lambda (x) (if x 1 0))
            0.5
            error-tolerance
            "DPmem of gensym, unconditioned." )

(define dirichlet-param 0.01)
(define CRP-param 1.0)
(check-test (repeat runs
                    (lambda ()
                      (mh-query samples lag
                                (define draw-type (make-CRP CRP-param))
                                (define obs (mem (lambda (type) (make-symmetric-dirichlet-discrete 3 dirichlet-param))))
                                (= (sample (obs (draw-type))) (sample (obs (draw-type))))
                                true)))
            (lambda (x) (if x 1 0))
            (+ (* (/ 1 (+ 1 CRP-param))  (/ (+ 1 dirichlet-param) (+ 1 (* 3 dirichlet-param))))   ;same crp table, same dirichlet draws
               (* (/ CRP-param (+ 1 CRP-param))   (/ 1 3))) ;different crp tables, same dirichlet draws...
            error-tolerance
            "varying numbers of xrps inside mem." )


"tests done!"