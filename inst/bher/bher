#!/usr/bin/python
import os, sys
from subprocess import Popen
from external import optfunc
from os.path import abspath, dirname
from datetime import datetime

def vprint(s, verbose):
    if verbose:
        print
        print s

def call(cmd, verbose=False, allow_fail=False):
    if verbose:
        print cmd
    p = Popen(cmd, shell=True)
    p.communicate()
    status = p.returncode
    if status != 0 and not allow_fail:
        print "command failed:\n%s" % cmd
        exit()
    else:
        return status

def parse_params(params):
    if params == "":
        return [(None, None)]
    else:
        key, vals = params.split(":")
        return [(key, val) for val in vals.split(",")]
    
@optfunc.main
@optfunc.arghelp('verbose', 'display all executed commands')
@optfunc.arghelp('debug', 'run all ikarus commands in debug mode')
@optfunc.arghelp('pretty', 'keep & pretty-print compiled file')
@optfunc.arghelp('ext', 'definitions to be included in header of compiled file')
@optfunc.arghelp('time', 'record the time it takes for the compiled file to run')
@optfunc.arghelp('set', 'run church file with multiple parameter settings')
@optfunc.arghelp('keep', 'do not delete compiled file')
@optfunc.arghelp('scheme', 'name of the scheme compiler to use')
def main(file, verbose=False, debug=False, keep=False, pretty=False, time=False, ext="", set="", scheme="vicare"):
    """Usage: %prog <file> [options]

Examples:

  bher foo.church -dp
  Compile & run foo.church in debug mode, pretty-print compiled file
  to foo.church.ss.

  bher foo.church -v -e defs.ss
  Compile & run foo.church including definitions from defs.ss, print
  all commands used.

  bher foo.church -t -s samples:10,100,1000
  Compile & run foo.church three times, replacing %(samples)s in
  foo.church with 10, 100, and 1000 respectively. Print out runtime
  for each setting."""
    if pretty: keep = True
    params = parse_params(set)
    bher_path = abspath(dirname(sys.argv[0]))
    settings = {
        "bher_path" : bher_path,
        "in_path" : abspath(file),
        "header_path" : abspath(os.path.join(bher_path, "scheme-compilers/header-" + scheme + ".sc")),
        "trailer_path" : abspath(os.path.join(bher_path, "scheme-compilers/trailer-" + scheme + ".sc")) ,
        "compiler" : abspath(os.path.join(bher_path, "church/church-compiler.ss")),
        "debug" : debug and "--debug" or "",
        "pretty" : pretty and "T" or "F",
        "ext" : ext and abspath(ext) or "",
        "scheme" : scheme,
        "r6rs": "--r6rs-script" #"-r6rs -program" 
    }

    for (i, (param_key, param_value)) in enumerate(params):

        if param_key:
            vprint("* %s: %s" % (param_key, param_value), True)            
            settings["out_path"] = abspath(file) + "." + str(i) + ".ss"
        else:
            settings["out_path"] = abspath(file) + ".ss"

        vprint("removing old compilation files (if existent)", verbose)
        call("rm -f '%(out_path)s'" % settings, verbose, allow_fail=True)
        call("rm -f '%(out_path)s.tmp'" % settings, verbose, allow_fail=True)        
        call("rm -f '%(in_path)s.tmp'" % settings, verbose, allow_fail=True)

        vprint("processing input file", verbose)
        if param_key:
            code = open(file).read() % { param_key : param_value }
            f = open(file + ".tmp", "w")
            f.write(code)
            f.close()
        else:
            call("cp '%(in_path)s' '%(in_path)s.tmp'" % settings, verbose)

        vprint("compiling church->scheme", verbose)
        call(("cd '%(bher_path)s' && %(scheme)s %(debug)s %(r6rs)s '%(compiler)s' " +
              "'%(in_path)s.tmp' '%(out_path)s.tmp' '%(ext)s' %(pretty)s") % settings, verbose)
        call("rm -f '%(in_path)s.tmp'" % settings, verbose, allow_fail=True)
        
        vprint("adding compiler-specific header & footer", verbose)
        call(("cat '%(header_path)s' '%(out_path)s.tmp' '%(trailer_path)s' " +
              "> '%(out_path)s'") % settings, verbose)
        call("rm -f '%(out_path)s.tmp'" % settings, verbose, allow_fail=True)
        
        vprint("running generated scheme ", verbose)
        pre = datetime.now()
        call("%(scheme)s %(debug)s --r6rs-script '%(out_path)s'" % settings, verbose)
        post = datetime.now()
        
        if time:
            delta = post-pre
            seconds = delta.seconds + delta.microseconds/1000000.0
            print("runtime: %fs" % seconds)
        
        if not keep:
            vprint("removing compiled file", verbose)
            call("rm -f '%(out_path)s'" % settings, verbose)

